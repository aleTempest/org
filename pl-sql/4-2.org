#+title: 4-2: Conditional Control: Case Statements

* Vocabulary

An expression that selects a result and returns it into a variable.

*CASE expression*

Shows the results of all possible combinations of two conditions.

*Logic Tables*

A block of code that performs actions based on conditional tests.

*CASE statement*

* Try It / Solve It

#+title: PL/SQL 4-2: Conditional Control: Case Statements

*1.A*

#+begin_src sql
DECLARE
 v_country_name wf_countries.country_name%TYPE := 'Japan';
 v_airports wf_countries.airports%TYPE;
 v_string VARCHAR2(60);
BEGIN
 SELECT airports INTO v_airports
 FROM wf_countries
 WHERE country_name = v_country_name;
 v_string :=
 CASE
 WHEN v_airports < 101 THEN 'There are 100 or fewer airports.'
 WHEN v_airports < 1001 THEN 'There are between 101 and 1,000 airports'
 WHEN v_airports < 10001 THEN 'There are between 1,001 and 10,000 airports'
 WHEN v_airports > 10000 THEN 'There are more than 10,000 airports.'
 ELSE 'The number of airports is not available for this country.'
 END;
 DBMS_OUTPUT.PUT_LINE(v_string);
END;
#+end_src

*1.B*

- Japan: There are more than 10,000 airports.
- Malaysia: There are between 1,001 and 10,000 airports.
- Mongolia: There are more than 10,000 airports.
- Navassa Island: The number of airports is not available for this country.
- Romania: There are between 1,001 and 10,000 airports.
- United States of America: There are more than 10,000 airports.

*2.A*

#+begin_src sql
DECLARE
 v_country_name wf_countries.country_name%TYPE := 'Grenada';
 v_coastline wf_countries.coastline %TYPE;
 v_coastline_description VARCHAR2(50);
BEGIN
 SELECT coastline INTO v_coastline
 FROM wf_countries
 WHERE country_name = v_country_name;
 v_coastline_description :=
 CASE
 WHEN v_coastline = 0 THEN 'no coastline'
 WHEN v_coastline < 1000 THEN 'a small coastline'
 WHEN v_coastline < 10000 THEN 'a mid-range coastline'
 ELSE 'a large coastline'
 END;
 DBMS_OUTPUT.PUT_LINE('Country ' || v_country_name || ' has ' || v_coastline_description);
END;
#+end_src

*2.B*

- Grenada: a small coastline
- Jamaica: a large coastline
- Japan: a large coastline
- Mongolia: a large coastline
- Ukraine: a large coastline

*3.A*

#+begin_src sql
DECLARE
 v_currency wf_countries.currency_code%TYPE := 'CHF';
 v_result VARCHAR2(50);
 v_count NUMBER(3);
BEGIN
 SELECT count(country_id) INTO v_count
 FROM wf_countries
 WHERE currency_code = v_currency;
 v_result :=
 CASE
 WHEN v_count < 10 THEN 'Fewer than 10 countries'
 WHEN v_count < 21 THEN 'Between 10 and 20 countries'
 ELSE 'More than 20 countries'
 END;
 DBMS_OUTPUT.PUT_LINE(v_result);
END;
#+end_src

*3.B*

- CHF (Swiss franc): Fewer than 10 countries
- EUR (Euro): Fewer than 10 countries

*4.A*

#+begin_src sql
DECLARE
 x BOOLEAN := FALSE;
 y BOOLEAN;
 v_color VARCHAR(20) := 'Red';
BEGIN
 IF (x OR y)
 THEN v_color := 'White';
 ELSE
 v_color := 'Black';
 END IF;
 DBMS_OUTPUT.PUT_LINE(v_color);
END;
#+end_src

Output: Black

*4.B*
#+begin_src sql
DECLARE
 x BOOLEAN ;
 y BOOLEAN ;
 v_color VARCHAR(20) := 'Red';
BEGIN
 IF (x OR y)
 THEN v_color := 'White';
 ELSE
 v_color := 'Black';
 END IF;
 DBMS_OUTPUT.PUT_LINE(v_color);
END;
#+end_src

Output: Black

*4.C*
#+begin_src sql
DECLARE
 x BOOLEAN := TRUE;
 y BOOLEAN := TRUE;
 v_color VARCHAR(20) := 'Red';
BEGIN
 IF (x OR y)
 THEN v_color := 'White';
 ELSE
 v_color := 'Black';
 END IF;
 DBMS_OUTPUT.PUT_LINE(v_color);
END;
#+end_src

Output: White

*4.D*

#+begin_src sql
DECLARE
 x BOOLEAN := FALSE;
 y BOOLEAN := FALSE;
 v_color VARCHAR(20) := 'Red';
BEGIN
 IF (x AND y)
 THEN v_color := 'White';
 ELSE
 v_color := 'Black';
 END IF;
 DBMS_OUTPUT.PUT_LINE(v_color);
END;
#+end_src

Output: Black
