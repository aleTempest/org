#+title: 2-1 Using Variables in PL/SQL
#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+LATEX_HEADER: \usepackage[spanish]{babel}

* Vocabulary
1. Used for storage of data and manipulation of stored values.

   *Variables*

2. Values passed to a program by a user or by another program to customize
   the program.

   *Parameters*

* Try It / Solve It
 1. Fill in the blanks.
    1. Variables can be assigned to the output of a *query*
    2. Variables can be assigned values in the *DECLARE* section of a PL/SQL block.
    3. Variables can be passed as *parameters* to subprograms.

 2. Identify valid and invalid variable declaration and initialization:
    #+begin_src sql
    number_of_copies PLS_INTEGER; -- valid
    printer_name CONSTANT VARCHAR2(10); -- valid
    by_when DATE := SYSDATE+1;
    #+end_src

    The statement:
    #+begin_src sql
    deliver_to VARCHAR2(10) := Johnson; -- invalid
    #+end_src
    is invalid, the correct statement should look like this:

    #+begin_src sql
    deliver_to VARCHAR2(10) := 'Johnson'; -- valid
    #+end_src

 3. Examine the following anonymous block and choose the appropriate statement.
    #+begin_src sql
    DECLARE
        fname VARCHAR2(25);
        lname VARCHAR2(25) DEFAULT 'fernandez';
    BEGIN
        DBMS_OUTPUT.PUT_LINE(fname || ' ' || lname);
    END;
    #+end_src

    *B. The block will give an error because the fname variable is used without initializing.*

 4. In Application Express:
    1. Create the following function:
        #+begin_src sql
        CREATE FUNCTION num_characters (p_string IN VARCHAR2)
        RETURN INTEGER AS
            v_num_characters INTEGER;
        BEGIN
        SELECT LENGTH(p_string) INTO v_num_characters
            FROM dual;
        RETURN v_num_characters;
        END;
    #+end_src
    2. Create and execute the following anonymous block:
       #+begin_src sql
       DECLARE
           v_length_of_string INTEGER;
       BEGIN
           v_length_of_string := num_characters('Oracle Corporation');
           DBMS_OUTPUT.PUT_LINE(v_length_of_string);
       END;
       #+end_src
 5. Write an anonymous block that uses a country name as input and prints
    the highest and lowest elevations for that country. Use the COUNTRIES
    table. Execute your block three times using Unit- ed States of America,
    French Republic, and Japan.
    #+begin_src sql
    DECLARE
        v_country_name VARCHAR2(100) := 'United States of America';
        v_highest_elevation NUMBER;
        v_lowest_elevation NUMBER;
    BEGIN
        SELECT MAX(ELEVATION), MIN(ELEVATION)
        INTO v_highest_elevation, v_lowest_elevation
        FROM COUNTRIES
    WHERE COUNTRY_NAME = v_country_name;
        DBMS_OUTPUT.PUT_LINE('Highest Elevation: ' || v_highest_elevation);
        DBMS_OUTPUT.PUT_LINE('Lowest Elevation: ' || v_lowest_elevation);
    END;
    #+end_src
